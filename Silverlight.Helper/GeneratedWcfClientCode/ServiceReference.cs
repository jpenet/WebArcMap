//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by slsvcutil, version 4.0.50826.0
// 
namespace ServiceReference.Digi.DTP.Silverlight.Web.Services.AuthenticationService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ServiceReference.Digi.DTP.Silverlight.Web.Services.AuthenticationService.Authenti" +
        "cationService")]
    public interface AuthenticationService
    {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:AuthenticationService/AccessAllowed", ReplyAction="urn:AuthenticationService/AccessAllowedResponse")]
        System.IAsyncResult BeginAccessAllowed(System.AsyncCallback callback, object asyncState);
        
        bool EndAccessAllowed(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface AuthenticationServiceChannel : ServiceReference.Digi.DTP.Silverlight.Web.Services.AuthenticationService.AuthenticationService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccessAllowedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public AccessAllowedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public bool Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticationServiceClient : System.ServiceModel.ClientBase<ServiceReference.Digi.DTP.Silverlight.Web.Services.AuthenticationService.AuthenticationService>, ServiceReference.Digi.DTP.Silverlight.Web.Services.AuthenticationService.AuthenticationService
    {
        
        private BeginOperationDelegate onBeginAccessAllowedDelegate;
        
        private EndOperationDelegate onEndAccessAllowedDelegate;
        
        private System.Threading.SendOrPostCallback onAccessAllowedCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public AuthenticationServiceClient()
        {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public AuthenticationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Net.CookieContainer CookieContainer
        {
            get
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    return httpCookieContainerManager.CookieContainer;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else
                {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<AccessAllowedCompletedEventArgs> AccessAllowedCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ServiceReference.Digi.DTP.Silverlight.Web.Services.AuthenticationService.AuthenticationService.BeginAccessAllowed(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginAccessAllowed(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool ServiceReference.Digi.DTP.Silverlight.Web.Services.AuthenticationService.AuthenticationService.EndAccessAllowed(System.IAsyncResult result)
        {
            return base.Channel.EndAccessAllowed(result);
        }
        
        private System.IAsyncResult OnBeginAccessAllowed(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((ServiceReference.Digi.DTP.Silverlight.Web.Services.AuthenticationService.AuthenticationService)(this)).BeginAccessAllowed(callback, asyncState);
        }
        
        private object[] OnEndAccessAllowed(System.IAsyncResult result)
        {
            bool retVal = ((ServiceReference.Digi.DTP.Silverlight.Web.Services.AuthenticationService.AuthenticationService)(this)).EndAccessAllowed(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAccessAllowedCompleted(object state)
        {
            if ((this.AccessAllowedCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AccessAllowedCompleted(this, new AccessAllowedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AccessAllowedAsync()
        {
            this.AccessAllowedAsync(null);
        }
        
        public void AccessAllowedAsync(object userState)
        {
            if ((this.onBeginAccessAllowedDelegate == null))
            {
                this.onBeginAccessAllowedDelegate = new BeginOperationDelegate(this.OnBeginAccessAllowed);
            }
            if ((this.onEndAccessAllowedDelegate == null))
            {
                this.onEndAccessAllowedDelegate = new EndOperationDelegate(this.OnEndAccessAllowed);
            }
            if ((this.onAccessAllowedCompletedDelegate == null))
            {
                this.onAccessAllowedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAccessAllowedCompleted);
            }
            base.InvokeAsync(this.onBeginAccessAllowedDelegate, null, this.onEndAccessAllowedDelegate, this.onAccessAllowedCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state)
        {
            if ((this.OpenCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync()
        {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState)
        {
            if ((this.onBeginOpenDelegate == null))
            {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null))
            {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null))
            {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state)
        {
            if ((this.CloseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync()
        {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState)
        {
            if ((this.onBeginCloseDelegate == null))
            {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null))
            {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null))
            {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ServiceReference.Digi.DTP.Silverlight.Web.Services.AuthenticationService.AuthenticationService CreateChannel()
        {
            return new AuthenticationServiceClientChannel(this);
        }
        
        private class AuthenticationServiceClientChannel : ChannelBase<ServiceReference.Digi.DTP.Silverlight.Web.Services.AuthenticationService.AuthenticationService>, ServiceReference.Digi.DTP.Silverlight.Web.Services.AuthenticationService.AuthenticationService
        {
            
            public AuthenticationServiceClientChannel(System.ServiceModel.ClientBase<ServiceReference.Digi.DTP.Silverlight.Web.Services.AuthenticationService.AuthenticationService> client) : 
                    base(client)
            {
            }
            
            public System.IAsyncResult BeginAccessAllowed(System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("AccessAllowed", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAccessAllowed(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AccessAllowed", _args, result)));
                return _result;
            }
        }
    }
}
// Auto generated configuration elements
// Generated client configuration:CustomBinding_AuthenticationService<>http://Services/Authentication.svc<>http://localhost/Digi.DTP.Silverlight.Web/Services/Authentication.svc
